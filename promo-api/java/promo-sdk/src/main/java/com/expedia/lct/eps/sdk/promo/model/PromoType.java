package com.expedia.lct.eps.sdk.promo.model;

import java.util.Objects;
import com.expedia.lct.eps.sdk.promo.model.RatePlan;
import com.expedia.lct.eps.sdk.promo.model.TravelDateBlackout;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;





@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-06-01T15:41:28.421-04:00")
public class PromoType   {
  
  private List<RatePlan> ratePlan = new ArrayList<RatePlan>();
  private List<TravelDateBlackout> travelDateBlackout = new ArrayList<TravelDateBlackout>();
  private Integer id = null;
  private String name = null;


  public enum StatusEnum {
    ACTIVE("Active"),
    INACTIVE("Inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return value;
    }
  }

  private StatusEnum status = null;
  private String travelDateStart = null;
  private String travelDateEnd = null;
  private String bookDateTimeStart = null;
  private String bookDateTimeEnd = null;
  private Integer percent = null;
  private Double amount = null;
  private Integer minLOS = null;
  private Integer minAdvBookDays = null;
  private Boolean mobileOnly = null;
  private Double score = null;

  
  /**
   * Derived rate plan IDs should never be provided, as the promotion will always be attached to the parent. If a derived rate plan is provided, the promo will be created on the parent. If the same promo already exists on the parent, it will return an error.
   **/
  public PromoType ratePlan(List<RatePlan> ratePlan) {
    this.ratePlan = ratePlan;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "Derived rate plan IDs should never be provided, as the promotion will always be attached to the parent. If a derived rate plan is provided, the promo will be created on the parent. If the same promo already exists on the parent, it will return an error.")
  @JsonProperty("RatePlan")
  public List<RatePlan> getRatePlan() {
    return ratePlan;
  }
  public void setRatePlan(List<RatePlan> ratePlan) {
    this.ratePlan = ratePlan;
  }

  
  /**
   **/
  public PromoType travelDateBlackout(List<TravelDateBlackout> travelDateBlackout) {
    this.travelDateBlackout = travelDateBlackout;
    return this;
  }
  
  @ApiModelProperty(example = "null", value = "")
  @JsonProperty("TravelDateBlackout")
  public List<TravelDateBlackout> getTravelDateBlackout() {
    return travelDateBlackout;
  }
  public void setTravelDateBlackout(List<TravelDateBlackout> travelDateBlackout) {
    this.travelDateBlackout = travelDateBlackout;
  }

  
  /**
   * Promo ID. Unique identifier generated by the promo service for each promo.
   **/
  public PromoType id(Integer id) {
    this.id = id;
    return this;
  }
  
  @ApiModelProperty(example = "null", value = "Promo ID. Unique identifier generated by the promo service for each promo.")
  @JsonProperty("id")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  
  /**
   * Promo name. Max 80 characters.
   **/
  public PromoType name(String name) {
    this.name = name;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "Promo name. Max 80 characters.")
  @JsonProperty("name")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  
  /**
   * Promo status. Active or Inactive.
   **/
  public PromoType status(StatusEnum status) {
    this.status = status;
    return this;
  }
  
  @ApiModelProperty(example = "null", value = "Promo status. Active or Inactive.")
  @JsonProperty("status")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  
  /**
   * The travel start date during which the Promotion is in effect. Format YYYY-MM-DD (e.g. 2014-09-16).
   **/
  public PromoType travelDateStart(String travelDateStart) {
    this.travelDateStart = travelDateStart;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The travel start date during which the Promotion is in effect. Format YYYY-MM-DD (e.g. 2014-09-16).")
  @JsonProperty("travelDateStart")
  public String getTravelDateStart() {
    return travelDateStart;
  }
  public void setTravelDateStart(String travelDateStart) {
    this.travelDateStart = travelDateStart;
  }

  
  /**
   * The travel end date during which the Promotion is in effect. Format YYYY-MM-DD (e.g. 2014-12-31).
   **/
  public PromoType travelDateEnd(String travelDateEnd) {
    this.travelDateEnd = travelDateEnd;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The travel end date during which the Promotion is in effect. Format YYYY-MM-DD (e.g. 2014-12-31).")
  @JsonProperty("travelDateEnd")
  public String getTravelDateEnd() {
    return travelDateEnd;
  }
  public void setTravelDateEnd(String travelDateEnd) {
    this.travelDateEnd = travelDateEnd;
  }

  
  /**
   * The start date and time when this promotion becomes available for booking. Format YYYY-MM-DDThh:mm:ss (e.g. 2014-09-16T00:00:00). No timezone information can be provided, it will always be relative to the property's configured timezone in Expedia system.
   **/
  public PromoType bookDateTimeStart(String bookDateTimeStart) {
    this.bookDateTimeStart = bookDateTimeStart;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The start date and time when this promotion becomes available for booking. Format YYYY-MM-DDThh:mm:ss (e.g. 2014-09-16T00:00:00). No timezone information can be provided, it will always be relative to the property's configured timezone in Expedia system.")
  @JsonProperty("bookDateTimeStart")
  public String getBookDateTimeStart() {
    return bookDateTimeStart;
  }
  public void setBookDateTimeStart(String bookDateTimeStart) {
    this.bookDateTimeStart = bookDateTimeStart;
  }

  
  /**
   * The end date and time when this promotion is no longer available for booking. Format YYYY-MM-DDThh:mm:ss (e.g. 2014-09-30T11:59:00). No timezone information can be provided, it will always be relative to the property's configured timezone in Expedia system.
   **/
  public PromoType bookDateTimeEnd(String bookDateTimeEnd) {
    this.bookDateTimeEnd = bookDateTimeEnd;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The end date and time when this promotion is no longer available for booking. Format YYYY-MM-DDThh:mm:ss (e.g. 2014-09-30T11:59:00). No timezone information can be provided, it will always be relative to the property's configured timezone in Expedia system.")
  @JsonProperty("bookDateTimeEnd")
  public String getBookDateTimeEnd() {
    return bookDateTimeEnd;
  }
  public void setBookDateTimeEnd(String bookDateTimeEnd) {
    this.bookDateTimeEnd = bookDateTimeEnd;
  }

  
  /**
   * The discount(percentage) applies to all nights of the guest's stay. The range must be between 10 and 75 inclusively, in increments of 1. Either percent or amount discount is returned not both at the same time.
   * minimum: 10.0
   * maximum: 75.0
   **/
  public PromoType percent(Integer percent) {
    this.percent = percent;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The discount(percentage) applies to all nights of the guest's stay. The range must be between 10 and 75 inclusively, in increments of 1. Either percent or amount discount is returned not both at the same time.")
  @JsonProperty("percent")
  public Integer getPercent() {
    return percent;
  }
  public void setPercent(Integer percent) {
    this.percent = percent;
  }

  
  /**
   * Used for promo with amount ($) discount. Amount discount can be used only by HotelCollect-only products. Range between 1 and 12,000,000 inclusive. When creating a promotion for a HotelCollect-only rate plan, use either the percent field or the amount field, but not both at the same time.
   * minimum: 1.0
   * maximum: 1.2E7
   **/
  public PromoType amount(Double amount) {
    this.amount = amount;
    return this;
  }
  
  @ApiModelProperty(example = "null", value = "Used for promo with amount ($) discount. Amount discount can be used only by HotelCollect-only products. Range between 1 and 12,000,000 inclusive. When creating a promotion for a HotelCollect-only rate plan, use either the percent field or the amount field, but not both at the same time.")
  @JsonProperty("amount")
  public Double getAmount() {
    return amount;
  }
  public void setAmount(Double amount) {
    this.amount = amount;
  }

  
  /**
   * The minimum night(s) that guest must stay. The range must be between 1 and 4 inclusively.
   * minimum: 1.0
   * maximum: 4.0
   **/
  public PromoType minLOS(Integer minLOS) {
    this.minLOS = minLOS;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The minimum night(s) that guest must stay. The range must be between 1 and 4 inclusively.")
  @JsonProperty("minLOS")
  public Integer getMinLOS() {
    return minLOS;
  }
  public void setMinLOS(Integer minLOS) {
    this.minLOS = minLOS;
  }

  
  /**
   * The minimum days before a travel date that the booking must take place. Optional, if not provided, means bookings can take place up until checkin day, assuming other constraints are met. The value should be a positive integer between 0 and 500.
   **/
  public PromoType minAdvBookDays(Integer minAdvBookDays) {
    this.minAdvBookDays = minAdvBookDays;
    return this;
  }
  
  @ApiModelProperty(example = "null", value = "The minimum days before a travel date that the booking must take place. Optional, if not provided, means bookings can take place up until checkin day, assuming other constraints are met. The value should be a positive integer between 0 and 500.")
  @JsonProperty("minAdvBookDays")
  public Integer getMinAdvBookDays() {
    return minAdvBookDays;
  }
  public void setMinAdvBookDays(Integer minAdvBookDays) {
    this.minAdvBookDays = minAdvBookDays;
  }

  
  /**
   * Boolean. Should this promotion only be displayed through mobile applications (available through smart phones and tablets).
   **/
  public PromoType mobileOnly(Boolean mobileOnly) {
    this.mobileOnly = mobileOnly;
    return this;
  }
  
  @ApiModelProperty(example = "null", value = "Boolean. Should this promotion only be displayed through mobile applications (available through smart phones and tablets).")
  @JsonProperty("mobileOnly")
  public Boolean getMobileOnly() {
    return mobileOnly;
  }
  public void setMobileOnly(Boolean mobileOnly) {
    this.mobileOnly = mobileOnly;
  }

  
  /**
   * A promo score calculated by the promo service. Range between 0.0 and 10.0 inclusive. Only returned if appropriate parameter is passed in request. Cannot be specified in create or update requests.
   * minimum: 0.0
   * maximum: 10.0
   **/
  public PromoType score(Double score) {
    this.score = score;
    return this;
  }
  
  @ApiModelProperty(example = "null", value = "A promo score calculated by the promo service. Range between 0.0 and 10.0 inclusive. Only returned if appropriate parameter is passed in request. Cannot be specified in create or update requests.")
  @JsonProperty("score")
  public Double getScore() {
    return score;
  }
  public void setScore(Double score) {
    this.score = score;
  }

  

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromoType promoType = (PromoType) o;
    return Objects.equals(this.ratePlan, promoType.ratePlan) &&
        Objects.equals(this.travelDateBlackout, promoType.travelDateBlackout) &&
        Objects.equals(this.id, promoType.id) &&
        Objects.equals(this.name, promoType.name) &&
        Objects.equals(this.status, promoType.status) &&
        Objects.equals(this.travelDateStart, promoType.travelDateStart) &&
        Objects.equals(this.travelDateEnd, promoType.travelDateEnd) &&
        Objects.equals(this.bookDateTimeStart, promoType.bookDateTimeStart) &&
        Objects.equals(this.bookDateTimeEnd, promoType.bookDateTimeEnd) &&
        Objects.equals(this.percent, promoType.percent) &&
        Objects.equals(this.amount, promoType.amount) &&
        Objects.equals(this.minLOS, promoType.minLOS) &&
        Objects.equals(this.minAdvBookDays, promoType.minAdvBookDays) &&
        Objects.equals(this.mobileOnly, promoType.mobileOnly) &&
        Objects.equals(this.score, promoType.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ratePlan, travelDateBlackout, id, name, status, travelDateStart, travelDateEnd, bookDateTimeStart, bookDateTimeEnd, percent, amount, minLOS, minAdvBookDays, mobileOnly, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromoType {\n");
    
    sb.append("    ratePlan: ").append(toIndentedString(ratePlan)).append("\n");
    sb.append("    travelDateBlackout: ").append(toIndentedString(travelDateBlackout)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    travelDateStart: ").append(toIndentedString(travelDateStart)).append("\n");
    sb.append("    travelDateEnd: ").append(toIndentedString(travelDateEnd)).append("\n");
    sb.append("    bookDateTimeStart: ").append(toIndentedString(bookDateTimeStart)).append("\n");
    sb.append("    bookDateTimeEnd: ").append(toIndentedString(bookDateTimeEnd)).append("\n");
    sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    minLOS: ").append(toIndentedString(minLOS)).append("\n");
    sb.append("    minAdvBookDays: ").append(toIndentedString(minAdvBookDays)).append("\n");
    sb.append("    mobileOnly: ").append(toIndentedString(mobileOnly)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

